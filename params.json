{"name":"Algorithms","tagline":"Implemention of Data Structures and Algorithms","body":"#Algorithms\r\n\r\nImplementation of Algorithms and Data Structures\r\n\r\n##Implemented Algorithms\r\n<table>\r\n  <tr>\r\n    <th>File Name</th>\r\n    <th>Algorithm(s)</th>\r\n    <th>Test Data</th>\r\n    <th>Description</th>\r\n  </tr>\r\n  <tr>\r\n    <td>MatrixMultiplication.py</td>\r\n    <td>Matrix Multiplication</td>\r\n    <td><em>Given with code</em></td>\r\n\t\t<td>Trivial Method of multiplying two matrices. Matrices are shored as List of lists</td>\r\n  </tr>\r\n  <tr>\r\n\t\t<td>KaratsubaMultiplication.py</td>\r\n    <td>Karatsuba Multiplication</td>\r\n\t\t<td><em>Given with code</em></td>\r\n\t\t<td>Multiplying two integers</td>\r\n  </tr>\r\n  <tr>\r\n\t<td>PolynomialAddition.py</td>\r\n    <td>Polynomial Addition and Multiplication</td>\r\n\t\t<td><em>Given with code</em></td>\r\n\t\t<td>Adds two polynomial vectors of same size. Multiplies two polynomial vectors</td>\r\n  </tr>\r\n  <tr>\r\n\t\t<td>MergeSort.py</td>\r\n    <td>Merge Sort</td>\r\n    <td><em>Given with code</em></td>\r\n\t\t<td>Sort an array of integer using divide and conquer paradigm with Merge Sort</td>\r\n  </tr>\r\n  <tr>\r\n    <td>QuickSort.py</td>\r\n    <td>Quick Sort</td>\r\n\t\t<td>IntegerArray.txt</td>\r\n    <td>Sort an array of integers using Quick sort</td>\r\n  </tr>\r\n  <tr>\r\n\t\t<td>QuickSort - ChoosingPivot.py</td>\r\n    <td>Quick sort using different pivots</td>\r\n    <td>QuickSort.txt</td>\r\n\t\t<td>Sort an array of using different pivots in quick sort to maximize performance</td>\r\n  </tr>\r\n  <tr>\r\n\t\t<td>RandomizedContraction.py</td>\r\n\t\t<td>Karger's minimum cut algorithm</td>\r\n\t\t<td>kargerMinCut.txt</td>\r\n\t\t<td>Randomized contraction algorithm to find minimum cut of a graph</td>\r\n  </tr>\r\n  <tr>\r\n\t\t<td>BreadthFirstSearch.py</td>\r\n\t\t<td>Breadth first graph searching algorithm</td>\r\n\t\t<td>graph2.txt</td>\r\n\t\t<td>Search the entire graph in levels</td>\r\n  </tr>\r\n  <tr>\r\n\t\t<td>BFS(ShortestPath).py</td>\r\n\t\t<td>BFS Application: shortest path</td>\r\n\t\t<td>graph.txt</td>\r\n\t\t<td>Computes shortest path from one point to another using BFS</td>\r\n  </tr>\r\n  <tr>\r\n\t\t<td>BFS(UndirectedConnectivity).py</td>\r\n\t\t<td>BFS Application: Undirected Connectivity</td>\r\n\t\t<td>graph2.txt</td>\r\n\t\t<td>Breadth first search to find the weekly connected components of an undirected graph</td>\r\n  </tr>\r\n  <tr>\r\n\t\t<td>DepthFirstSearch.py</td>\r\n\t\t<td>Depth first graph searching algorithm</td>\r\n\t\t<td>graph3.txt</td>\r\n\t\t<td>Search the entire graph in depth</td>\r\n  </tr>\r\n  <tr>\r\n\t\t<td>DepthFirstSearch(Recursive).py</td>\r\n\t\t<td>Recursive Depth first graph searching algorithm</td>\r\n\t\t<td>graph3.txt</td>\r\n\t\t<td>Search the entire graph in depth. Using recursion</td>\r\n  </tr>\r\n  <tr>\r\n\t\t<td>StronglyConnectedComponents.py</td>\r\n\t\t<td>DFS Application: Strongly connected components</td>\r\n\t\t<td>SCC.txt</td>\r\n\t\t<td>Using recursive DFS finds the strongly connected components of a directed graph</td>\r\n  </tr>\r\n  <tr>\r\n\t\t<td>HuffmanAlgorithm.h</td>\r\n\t\t<td>Huffman's Algorithm</td>\r\n\t\t<td><em>None</em></td>\r\n\t\t<td>Huffman's text compression algorithm. Works only with perfect sizes.</td>\r\n  </tr>\r\n  <tr>\r\n  \t<td>TowersOfHanoi.h</td>\r\n  \t<td>Towers of Hanoi</td>\r\n  \t<td><em>User Input</em></td>\r\n  \t<td>Implementation of classic tower of hanoi recursive algorithm.</td>\r\n  </tr>\r\n</table>\r\n\r\n##Implemented Data Structures\r\n<table>\r\n  <tr>\r\n    <th>File Name</th>\r\n    <th>Data Structure</th>\r\n    <th>Test Data</th>\r\n\t<th>Description</th>\r\n  </tr>\r\n  <tr>\r\n    <td>ArrayList.h</td>\r\n    <td>Linked List using Array</td>\r\n    <td><em>None</em></td>\r\n\t\t<td>Generic array implementation of the linked list. Using built-in C++ array.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>ArrayQueue.h</td>\r\n    <td>Queue based on Array</td>\r\n    <td><em>None</em></td>\r\n\t\t<td>Generic array implementation of Queue.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>ArrayStack.h</td>\r\n    <td>Stack based on Array</td>\r\n    <td><em>None</em></td>\r\n\t\t<td>Generic array implementation of Stack.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Heaps(Max).py</td>\r\n    <td>Max Heap</td>\r\n    <td><em>None</em></td>\r\n\t\t<td>Implementation of max heap data structure using array</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Heaps.py</td>\r\n    <td>Min Heap</td>\r\n    <td><em>None</em></td>\r\n\t\t<td>Implementation of min heap data structure using array</td>\r\n  </tr>\r\n</table>\r\n","google":"Arsalan Khairani","note":"Don't delete this file! It's used internally to help with page regeneration."}